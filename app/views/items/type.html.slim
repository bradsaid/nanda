/ ===== SEO + JSON-LD: Item Type =====
- type_name     = @item_type.to_s
- country_param = params[:country].to_s.presence
- given_cnt     = (@given_episode_ids   || []).uniq.size
- brought_cnt   = (@brought_episode_ids || []).uniq.size
- total_items   = (@items_in_type_count || 0)
- subtitle_bits = []
- subtitle_bits << "in #{country_param}" if country_param
- subtitle_str  = subtitle_bits.any? ? " — " + subtitle_bits.join(" ") : ""

/ Title + meta
- content_for :title, "#{type_name} Items – Naked and Afraid#{subtitle_str}"
- content_for :meta_description, "#{type_name} items used on Naked & Afraid#{country_param ? " in #{country_param}" : ""}. #{total_items} item(s) in this type. Given in #{given_cnt} episode(s) and brought in #{brought_cnt}."
- content_for :keywords, "Naked and Afraid items, #{type_name.downcase} items, survival gear, brought items, given items#{country_param ? ", #{country_param}" : ""}"
- content_for :canonical_url, request.original_url
- content_for :og_title, "#{type_name} Items – Naked and Afraid"
- content_for :og_description, "#{total_items} #{type_name} item(s). Given: #{given_cnt} • Brought: #{brought_cnt}#{country_param ? " • Country: #{country_param}" : ""}."

/ JSON for schema (helper builds JSON; single-line to keep Slim happy)
- data = item_type_json_payload(item_type: type_name, country: country_param, items_in_type_count: total_items, given_episode_ids: @given_episode_ids, brought_episode_ids: @brought_episode_ids, given_ai: @given_ai, brought_ai: @brought_ai)
script type="application/json" id="item-type-jsonld-data"= data
= javascript_import_module_tag "json_ld/episodeitem_type", defer: true
/ ===== end SEO + JSON-LD =====

.container.my-4
  / Header
  .pb-2.mb-3.border-bottom.site-header
    h1.h3.mb-0.logo = @item_type
    p.subtitle = "#{@items_in_type_count} item(s) in this type. Analytics across all appearances."

  / Country filter
  = form_with url: type_items_path(@item_type), method: :get, local: true, class: "card shadow-sm mb-4" do
    .card-header.d-flex.align-items-center
      span.me-2(aria-hidden="true") 🌍
      span Filter
    .card-body
      - countries = Location.where.not(country: [nil, ""]).distinct.order(:country).pluck(:country)
      .row.g-3.align-items-end
        .col-md-4
          = label_tag :country, "Country", class: "form-label"
          = select_tag :country,
              options_for_select([["All Countries", ""]] + countries.map { |c| [c, c] }, @country),
              class: "form-select"
        .col-md-auto
          = submit_tag "Apply", class: "btn btn-dark"
        .col-md-auto
          = link_to "Reset", type_items_path(@item_type), class: "btn btn-light"

  / ---------- Quick stats (dedup by episode) ----------
  - given_episode_ids   = @given_episode_ids   || []
  - brought_episode_ids = @brought_episode_ids || []

  .row.g-3.mb-4
    .col-md-6.col-lg-3
      .card.shadow-sm.h-100
        .card-body
          .small.text-muted.mb-1 Given in episodes
          .display-6.fw-bold = given_episode_ids.size
    .col-md-6.col-lg-3
      .card.shadow-sm.h-100
        .card-body
          .small.text-muted.mb-1 Brought in episodes
          .display-6.fw-bold = brought_episode_ids.size

  / ===== Given — by episode (unique within episode) =====
  - given_by_ep = (@given_ai || []).group_by { |ai| ai.appearance.episode }
  .card.shadow-sm.mb-4
    .card-header.d-flex.align-items-center.justify-content-between
      span
        span.me-2(aria-hidden="true") 🎁
        strong Given — Episodes
      span.badge.rounded-pill.bg-secondary-subtle.text-secondary-emphasis = given_by_ep.size
    .table-responsive
      table.table.table-sm.table-hover.mb-0
        thead.table-light
          tr
            th Episode
            th Air Date
            th Location
            th Recipients
            th Items
        tbody
          - if given_by_ep.blank?
            tr
              td.text-muted.py-4(colspan="5") No given appearances
          - else
            - given_by_ep.sort_by { |ep, _| [ep&.air_date || Date.new(1,1,1), ep&.id || 0] }.each do |ep, ais|
              - recips = ais.map { |ai| ai.appearance.survivor.full_name }.uniq
              - items  = ais.map(&:item).compact.uniq
              tr
                td = link_to(ep.title, episode_path(ep))
                td = ep.air_date || "—"
                td = [ep.location&.country, ep.location&.region, ep.location&.site].compact.join(" / ").presence || "—"
                td = recips.join(", ")
                td
                  - if items.any?
                    = safe_join(items.map { |it| link_to(it.name, item_path(it)) }, ", ")
                  - else
                    | —

  / ===== Brought — by episode (unique within episode) =====
  - brought_by_ep = (@brought_ai || []).group_by { |ai| ai.appearance.episode }
  .card.shadow-sm.mb-4
    .card-header.d-flex.align-items-center.justify-content-between
      span
        span.me-2(aria-hidden="true") 🧰
        strong Brought — Episodes
      span.badge.rounded-pill.bg-secondary-subtle.text-secondary-emphasis = brought_by_ep.size
    .table-responsive
      table.table.table-sm.table-hover.mb-0
        thead.table-light
          tr
            th Episode
            th Air Date
            th Location
            th Brought by
            th Items
        tbody
          - if brought_by_ep.blank?
            tr
              td.text-muted.py-4(colspan="5") No brought appearances
          - else
            - brought_by_ep.sort_by { |ep, _| [ep&.air_date || Date.new(1,1,1), ep&.id || 0] }.each do |ep, ais|
              - people = ais.map { |ai| ai.appearance.survivor.full_name }.uniq
              - items  = ais.map(&:item).compact.uniq
              tr
                td = link_to(ep.title, episode_path(ep))
                td = ep.air_date || "—"
                td = [ep.location&.country, ep.location&.region, ep.location&.site].compact.join(" / ").presence || "—"
                td = people.join(", ")
                td
                  - if items.any?
                    = safe_join(items.map { |it| link_to(it.name, item_path(it)) }, ", ")
                  - else
                    | —

  / ===== By Country (distinct episodes) =====
  .card.shadow-sm
    .card-header.d-flex.align-items-center
      span.me-3.fs-3(aria-hidden="true") 🌐
      h2.h6.mb-0 By Country
    .table-responsive
      table.table.table-sm.table-hover.mb-0
        thead.table-light
          tr
            th(scope="col") Country
            th(scope="col" class="text-end") Total
        tbody
          - if @by_country.blank?
            tr
              td.text-muted.py-4(colspan="2") No data
          - else
            - @by_country.each do |r|
              tr
                td = r.country.presence || "Unknown"
                td.text-end = r.total.to_i
