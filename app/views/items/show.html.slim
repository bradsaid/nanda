/ ===== Item details =====
- content_for :title, @item.name

.container.my-4
  / Header
  .pb-2.mb-3.border-bottom.site-header
    h1.h3.mb-0.logo = @item.name
    p.subtitle Analytics for this item across all episodes.

  / Country filter
  = form_with url: item_path(@item), method: :get, local: true, class: "card shadow-sm mb-4" do
    .card-header.d-flex.align-items-center
      span.me-2(aria-hidden="true") üåç
      span Filter
    .card-body
      - countries = Location.where.not(country: [nil, ""]).distinct.order(:country).pluck(:country)
      .row.g-3.align-items-end
        .col-md-4
          = label_tag :country, "Country", class: "form-label"
          = select_tag :country,
              options_for_select([["All Countries", ""]] + countries.map { |c| [c, c] }, @country),
              class: "form-select"
        .col-md-auto
          = submit_tag "Apply", class: "btn btn-dark"
        .col-md-auto
          = link_to "Reset", item_path(@item), class: "btn btn-outline-secondary"

  / ---------- Quick stats (dedup + adjusted) ----------
  - given_episode_ids   = @given_episode_ids   || []
  - brought_episode_ids = @brought_episode_ids || []
  - given_keys          = @given_keys          || []
  - brought_keys        = @brought_keys        || []

  .row.g-3.mb-4
    .col-md-6.col-lg-3
      .card.shadow-sm.h-100
        .card-body
          .small.text-muted.mb-1 Given in episodes 
          .display-6.fw-bold = given_episode_ids.size
          /.small.text-muted.mt-1 = "Adjusted (continuous=1): #{given_keys.size}"
    .col-md-6.col-lg-3
      .card.shadow-sm.h-100
        .card-body
          .small.text-muted.mb-1 Brought in episodes 
          .display-6.fw-bold = brought_episode_ids.size
          /.small.text-muted.mt-1 = "Adjusted (continuous=1): #{brought_keys.size}"

  / ===== Given ‚Äî by episode (unique within episode) =====
  - given_by_ep = (@given_ai || []).group_by { |ai| ai.appearance.episode }
  .card.shadow-sm.mb-4
    .card-header.d-flex.align-items-center.justify-content-between
      span
        span.me-2(aria-hidden="true") üéÅ
        strong Given ‚Äî Episodes (unique)
      span.badge.rounded-pill.bg-secondary-subtle.text-secondary-emphasis = given_by_ep.size
    .table-responsive
      table.table.table-sm.table-hover.mb-0
        thead.table-light
          tr
            th Episode
            th Air Date
            th Location
            th Recipients
        tbody
          - if given_by_ep.blank?
            tr
              td.text-muted.py-4(colspan="4") No given appearances
          - else
            - given_by_ep.sort_by { |ep, _| [ep&.air_date || Date.new(1,1,1), ep&.id || 0] }.each do |ep, ais|
              - recipients = ais.map { |ai| ai.appearance.survivor.full_name }.uniq
              tr
                td = link_to(ep.title, episode_path(ep))
                td = ep.air_date || "‚Äî"
                td = [ep.location&.country, ep.location&.region, ep.location&.site].compact.join(" / ").presence || "‚Äî"
                td = recipients.join(", ")

  / ===== Brought ‚Äî by episode (unique within episode) =====
  - brought_by_ep = (@brought_ai || []).group_by { |ai| ai.appearance.episode }
  .card.shadow-sm.mb-4
    .card-header.d-flex.align-items-center.justify-content-between
      span
        span.me-2(aria-hidden="true") üß∞
        strong Brought ‚Äî Episodes
      span.badge.rounded-pill.bg-secondary-subtle.text-secondary-emphasis = brought_by_ep.size
    .table-responsive
      table.table.table-sm.table-hover.mb-0
        thead.table-light
          tr
            th Episode
            th Air Date
            th Location
            th Brought by
        tbody
          - if brought_by_ep.blank?
            tr
              td.text-muted.py-4(colspan="4") No brought appearances
          - else
            - brought_by_ep.sort_by { |ep, _| [ep&.air_date || Date.new(1,1,1), ep&.id || 0] }.each do |ep, ais|
              - people = ais.map { |ai| ai.appearance.survivor.full_name }.uniq
              tr
                td = link_to(ep.title, episode_path(ep))
                td = ep.air_date || "‚Äî"
                td = [ep.location&.country, ep.location&.region, ep.location&.site].compact.join(" / ").presence || "‚Äî"
                td = people.join(", ")

  / ===== By Country (adjusted totals from controller) =====
  .card.shadow-sm
    .card-header.d-flex.align-items-center
      span.me-3.fs-3(aria-hidden="true") üåê
      h2.h6.mb-0 By Country
    .table-responsive
      table.table.table-sm.table-hover.mb-0
        thead.table-light
          tr
            th(scope="col") Country
            th(scope="col" class="text-end") Total (adjusted)
        tbody
          - if @by_country.blank?
            tr
              td.text-muted.py-4(colspan="2") No data
          - else
            - @by_country.each do |r|
              tr
                td = r.country.presence || "Unknown"
                td.text-end = r.total.to_i
