/ ===== Episode Show =====
- series      = @episode.season&.series
- season_num  = @episode.season&.number
- ep_num      = @episode.number_in_season
- title_text  = @episode.title.presence || "Episode"
- subtitle    = [series&.name, ("S#{season_num}" if season_num), ("E#{ep_num}" if ep_num)].compact.join(" • ")
- air_date    = @episode.air_date&.strftime("%b %-d, %Y")
- loc         = @episode.location
- loc_str     = [loc&.country, loc&.region, loc&.site].compact.join(" • ")

- content_for :title, "#{title_text} | #{subtitle}"

.container.my-4
  / ===== Back link + Title =====
  .pb-2.mb-3.border-bottom.site-header
    = link_to "← All episodes", episodes_path, class: "small link-primary text-decoration-underline"
    h1.h3.mb-1 = title_text
    - if subtitle.present?
      p.text-muted.mb-0 = subtitle

  / ===== Episode meta =====
  .row.g-3.mb-4
    .col-md-4
      .card.shadow-sm.h-100
        .card-body
          .d-flex.align-items-center.gap-3
            span.fs-3(aria-hidden="true") 📍
            .flex-grow-1
              .text-uppercase.small.text-muted Location
              .fw-semibold = loc_str.presence || "—"
    .col-md-4
      .card.shadow-sm.h-100
        .card-body
          .d-flex.align-items-center.gap-3
            span.fs-3(aria-hidden="true") 📅
            .flex-grow-1
              .text-uppercase.small.text-muted Air Date
              .fw-semibold = air_date.presence || "—"
    .col-md-4
      .card.shadow-sm.h-100
        .card-body
          .d-flex.align-items-center.gap-3
            span.fs-3(aria-hidden="true") ⏱️
            .flex-grow-1
              .text-uppercase.small.text-muted Scheduled Days
              .fw-semibold = (@episode.scheduled_days.presence || "—")

  - if @episode.notes.present?
    .card.shadow-sm.mb-4
      .card-header Notes
      .card-body
        = simple_format(@episode.notes)

  / ===== Participants =====
  .card.shadow-sm
    .card-header.d-flex.align-items-center
      span.me-3.fs-3(aria-hidden="true") 👥
      h2.h5.mb-0 Participants
    - if @episode.appearances.present?
      .table-responsive
        table.table.table-striped.table-hover.mb-0
          thead.table-light
            tr
              th(scope="col") Name
              th(scope="col") Role
              th(scope="col" class="text-nowrap") PSR
              th(scope="col" class="text-end") Days
              th(scope="col") Result
              th(scope="col") Items
          tbody
            - @episode.appearances.each do |a|
              - s = a.survivor
              - start_psr = a.starting_psr
              - end_psr   = a.ending_psr
              - days_cell = a.days_lasted
              / ----- Items per appearance (corrected) -----
              - br_ai = a.appearance_items.find { |ai| ai.source == "brought" }
              - br    = br_ai&.item&.name
              - given = a.appearance_items.select { |ai| ai.source == "given" }.map { |ai| q = ai.quantity.to_i; name = ai.item.name; q > 1 ? "#{name}×#{q}" : name }.join(", ")
              tr
                td
                  = link_to(s.full_name, survivor_path(s), class: "link-primary fw-medium")
                  - if a.partner_replacement
                    span.badge.text-bg-warning.ms-2 title="Partner replacement" PR
                td = a.role.presence || "—"
                td = ([start_psr, end_psr].compact.join(" → ").presence || "—")
                td.text-end = (days_cell.presence || "—")
                td
                  - if a.result.present?
                    - ok = (a.result == "Completed")
                    span.badge class=(ok ? "bg-success" : "bg-danger") = a.result
                  - else
                    span.text-muted —
                td
                  - if br.present?
                    span = "brought: #{br}"
                  - else
                    span.text-muted —
                  - if given.present?
                    br
                    span = "given: #{given}"
    - else
      .card-body
        p.text-muted.mb-0 No participants recorded.
