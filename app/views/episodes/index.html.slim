/ ===== Episodes — Seasons overview =====
- content_for :title, "Episodes"

.container.my-4
  h1.h3.mb-4 Episodes by Season

  - if @seasons.empty?
    p.text-muted.mb-0 No seasons found.
  - else
    .row.row-cols-1.row-cols-md-2.row-cols-xl-3.g-4
      - @seasons.each do |season|
        - series_name = season.series&.name
        - count = @episode_counts[season.id].to_i
        .col
          .card.h-100.shadow-sm
            .card-header.d-flex.justify-content-between.align-items-center
              h2.h6.mb-0
                = link_to "#{series_name} — Season #{season.number}", season_path(season), class: "link-body-emphasis text-decoration-none fw-semibold"
              span.badge.text-bg-light = "#{count} ep#{'s' if count != 1}"

            .list-group.list-group-flush
              - previews = @episodes_by_season[season] || []
              - if previews.empty?
                .list-group-item.text-muted No episodes yet.
              - else
                - previews.each do |ep|
                  - loc = ep.location
                  - loc_str = [loc&.country, loc&.region, loc&.site].compact.join(" • ").presence || "—"
                  - air_str = ep.air_date&.strftime("%b %-d, %Y") || "—"
                  - title   = ep.title.presence || "Untitled"
                  .list-group-item
                    .d-flex.justify-content-between.align-items-start
                      .me-3
                        = link_to title, episode_path(ep), class: "link-primary text-decoration-underline fw-semibold"
                        .small.text-muted.mt-1 = loc_str
                      span.badge.text-bg-secondary.ms-2 = "E#{ep.number_in_season || '—'}"
                    .small.text-muted.mt-1 = air_str

            .card-body
              = link_to "View all #{count} episodes", season_path(season), class: "btn btn-outline-primary w-100"
